# Inint one new repo 
git init

# Status of the repo
git status

# we make some changes in the repo
# if we call git status again -> different message.
# different status

# staged:
# Files are ready to be committed.

# unstaged:
# Files with changes that have not been prepared to be committed.

# untracked:
# Files aren't tracked by Git yet. This usually indicates a newly created file.

# deleted:
# File has been deleted and is waiting to be removed from Git.

# what we want to do with the changes?
# add only part of the changes
 git add <filename>
# add all 
git add -A
# remove changes for one specific file 
git reset <filename>
# add specific extensions Files
git add '*.txt'

# after we add all we want to this commit, we can set a message that will help to identify the changes
git commit -m "This is the message that will appear for each commit"

# add & commit with message
git commit -am "Delete stuff"

# We want to know what is happening! 
# Basic Information
git log
# Detail Information
git log --summary

# Do you want to go online? 
# Add remote
git remote add origin https://github.com/marcelfarres/labtutorial.git
# Push changes
git push -u origin master

# But I don't want to apply some changes ... 
# simple stash changes
git stash
# simple get back the changes
git stash apply

# List staged
git stash List
git stash show [stash@{n}]
git stash drop  [stash@{n}]
git stash pop [stash@{n}]
git stash apply [stash@{n}]
git stash save "message"
# Complete options
git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
		       [-u|--include-untracked] [-a|--all] [<message>]]

# Do you want to see the changes between last commit and now? 
git diff 

# I was doing some work at home, how I update this computer?
git pull --rebase origin master # or other name
# At this point it merge (if possible) the local and remote changes
# And solve the problems (later on)
# How I can see the changes?
# See if there are changes to commit
git status 
# See the changes itself
git diff HEAD
# add the changes
git add -A
# See the staged changes 
git diff --staged
# But you realize that this changes where wrong! 
# Remove the changes 
git reset <filename>
# Unstage the changes
git checkout -- <filename>


# I am working with something new non related. 
# Create a new branch 
git branch my_new_fancy_branch
# Go to this new branch
git checkout my_new_fancy_branch
# You can do it all toghether 
git checkout -b new_branch

# Publish new branch to the remote
git push -u origin <branch>

# I want to remove files/folders
# files
git rm '*.txt'
# folders
git rm -r folder_of_cats

# I want to get all the information from the remote
git fetch -all

# I want to list all the branches I have
git branch

# I want to merge 2 branches
git checkout [where will be merge]
git merge [feature branch that we want to join with master]

# delete the branch
git branch -d [name]
# force to delete
git branch -D 
git branch -d -f 

# 


# DO NOT FORGET 
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status